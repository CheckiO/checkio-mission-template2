<body data-author="YOUR_NICK">
<div class="question-answer">
    <div class="question">
        I don't know how to start solving this mission
    </div>
    <div class="answer">
        I offer you the following idea: you need to remember in which positions the zeros are located; sort the list
        in ascending order, without zeros; return the zeros to their positions.
    </div>
</div>
<div class="question-answer">
    <div class="question">
        I need help to continue the mission
    </div>
    <div class="answer">
        It will be useful for you to read some information about:
        <a href='https://docs.python.org/3.10/tutorial/datastructures.html'>list.insert()</a>
        (<a href='https://www.w3schools.com/python/ref_list_insert.asp'>example</a> ),
        <a href='https://docs.python.org/3.10/library/functions.html#sorted'>sorted()</a>
        (<a href='https://www.w3schools.com/python/ref_func_sorted.asp'>example</a> ),
        <a href='https://docs.python.org/3.10/library/functions.html#filter'>filter()</a>
        (<a href='https://www.w3schools.com/python/ref_func_filter.asp'>example</a> ),
        <a href='https://docs.python.org/3.10/library/functions.html#enumerate'>enumerate()</a>
        (<a href='https://www.w3schools.com/python/ref_func_enumerate.asp'>example</a> ).
    </div>
</div>
<div class="question-answer">
    <div class="question">
        Need help!
    </div>
    <div class="answer">
        Let's start by creating a list in which we will hold the positions of zeros. We will use the enumerate()
        function and the list comprehension for this.
        <pre class="brush: python">
items = [5, 3, 0, 0, 4, 1, 4, 0, 7]
res = [i for i in enumerate(items) if i[1] == 0]
print(res)
        </pre>
        <div class="output">
                <p>Output</p>
                <pre>[(2, 0), (3, 0), (7, 0)]</pre>
        </div>
        Pairs (index, value) fall into the list. Therefore, we record for ourselves exactly where the zeros were.
    </div>
</div>
<div class="question-answer">
    <div class="question">
        I don't know what to do anymore. I need a little hint.
    </div>
    <div class="answer">
        The next step is to create a list in which we will place the sorted input list without zeros. To do
        this, we will use the filter() and sorted() functions.
        <pre class="brush: python">
items = [5, 3, 0, 0, 4, 1, 4, 0, 7]
res = [i for i in enumerate(items) if i[1] == 0]
res_2 = sorted(filter(lambda x: x > 0, items))
print(res_2)
        </pre>
        <div class="output">
                <p>Output</p>
                <pre>[1, 3, 4, 4, 5, 7]</pre>
        </div>
        The filter() function uses an anonymous lambda function, in which we use a simple expression to check each
        element of the given list to see if it is greater than 0. If so, we leave it, if not, we skip it. And
        immediately put the result of the filter() function to the sorted() function, which sorts the newly created
        list by the increasing value of the elements.
    </div>
</div>
<div class="question-answer">
    <div class="question">
        Nothing works. SOS
    </div>
    <div class="answer">
        All we have to do is put our zeros back into their positions in list <b class="code">res_2.</b>
        We'll use the for loop and list.insert() method for this. It takes the position of the element as
        the first argument and the value of the element as the second element. That is, our saved pairs in
        <b class="code">res</b> will come in handy.
        <pre class="brush: python">
items = [5, 3, 0, 0, 4, 1, 4, 0, 7]
res = [i for i in enumerate(items) if i[1] == 0]
res_2 = sorted(filter(lambda x: x > 0, items))
for i in res:
    res_2.insert(i[0], i[1])
        </pre>
    </div>
</div>
<div class="question-answer">
    <div class="question">
        I don't want to give up, help!
    </div>
    <div class="answer">
        All you have to do is wrap the code in a function expression and return <b class="code">res_2.</b>
        <pre class="brush: python">
from typing import Iterable


def except_zero(items: list) -> Iterable:
    res = [i for i in enumerate(items) if i[1] == 0]
    res_2 = sorted(filter(lambda x: x > 0, items))
    for i in res:
        res_2.insert(i[0], i[1])
    return res_2
        </pre>
    </div>
</div>
<div class="question-answer">
    <div class="question">
        I want to be the best of the best PROGRAMMERS!!! SHOW ME MORE SOLUTIONS!!1!!!11!
    </div>
    <div class="answer">
        Okay, okay! That's the spirit!=)
        This solution will be difficult to understand. We can solve this mission using the <b class="code">numpy</b> module.
        Here you can read about this <a href='https://numpy.org/doc/'>module</a>.
        <pre class="brush: python">
import numpy

def except_zero(items):
    items = numpy.r_[items]
    items[items != 0] = sorted(items[items != 0])
    return items
        </pre>
    </div>
</div>


</body>
